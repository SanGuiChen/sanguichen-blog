[
  {
    "slug": "vibe-coding-blog",
    "title": "我的第一个博客：用 Qwen3 + Trae 实现「Vibe Coding」全记录（备注：这篇也是 Qwen3 总结的，基本没怎么人工审核）",
    "summary": "一名前端工程师测试AI编程边界的实验记录，全程使用Qwen3+Trae实现React博客项目",
    "date": "2025-04-05",
    "readTime": "6分钟",
    "tags": [
      "AI编程",
      "React",
      "博客",
      "前端开发",
      "Vite"
    ],
    "content": "# 我的第一个博客：用 Qwen3 + Trae 实现「Vibe Coding」全记录\n\n---\n\n## 🌱 起因：作为一名前端工程师，我想测试 AI 的边界\n\n我是一名有多年经验的前端开发者，熟悉 React、Vite、Webpack、CI/CD 等技术栈。我建过多个静态博客，也写过复杂的前端架构。\n\n这次，我不是为了“做一个博客”，而是想做一次实验：\n\n> **如果我把一个完整的项目交付给 AI，不写一行代码，它能完成到什么程度？**\n\n于是，我决定用 **Qwen3 + Trae IDE** 来实现一个 React 博客项目，全程不手动编写任何核心代码，只通过对话引导完成。\n\n目标很明确：\n\n- ✅ 技术栈：React + Vite + react-markdown + GitHub Pages\n- ✅ 功能：博客列表页、详情页、Markdown 渲染、自动化部署\n- ✅ 工程化：组件化结构、posts.json 自动生成、CI/CD 部署\n\n这是一次对 **AI 编程能力的真实压力测试**。\n\n---\n\n## 🤖 协作模式：Qwen3 设计，Trae 执行\n\n我的角色从“开发者”转变为“AI 协调者”：\n\n| 角色       | 工具     | 职责                                                             |\n| ---------- | -------- | ---------------------------------------------------------------- |\n| **架构师** | Qwen3    | 输出高质量设计稿，包含技术选型、目录结构、组件设计、构建部署方案 |\n| **工程师** | Trae IDE | 根据设计稿生成代码、创建文件、执行命令、修复错误                 |\n| **评审者** | 我       | 验收结果、发现问题、反馈优化、推动闭环                           |\n\n整个过程，我不写代码，但全程参与决策与质量把控。\n\n---\n\n## 🛠 实现路径：从设计到部署\n\n### 第一步：让 Qwen3 输出完整设计稿\n\n我向 Qwen3 提出需求：\n\n> “帮我设计一个部署在 GitHub Pages 的 React 博客，支持 Markdown 内容，有列表页和详情页。”\n\nQwen3 输出了一份远超预期的《[博客网站设计逻辑稿](/post/design-draft)》，包含：\n\n- 技术选型合理性分析（React + Vite + react-markdown）\n- 项目结构规划（`src/components/`, `src/pages/`, `data/posts.json`）\n- 组件拆分建议（Layout、BlogList、BlogCard、BlogDetail）\n- 构建与部署方案（Vite 配置、GitHub Actions）\n- 未来扩展建议（搜索、RSS、PWA）\n\n这份设计稿的完整度和专业性，已经接近资深前端工程师的输出水平。\n\n---\n\n### 第二步：让 Trae 执行项目搭建\n\n我将设计稿交给 Trae：\n\n> “请根据这份设计稿，实现这个博客项目。”\n\nTrae 开始自动执行：\n\n- 初始化 Vite + React 项目\n- 安装 `react-router-dom`、`react-markdown`、`remark-gfm`、`rehype-highlight`\n- 创建组件、页面、数据文件\n- 生成示例 Markdown 文章\n- 配置 `vite.config.ts` 和基础路由\n\n从项目初始化到可运行原型，**整个过程无需我干预命令执行**。\n\n---\n\n## 💡 使用 Trae 的真实体验：能力与局限并存\n\n作为一名前端开发者，我对生成代码的质量有明确判断标准。以下是我在验收过程中的观察：\n\n### ✅ 值得肯定的能力\n\n- **工程结构生成准确**  \n  Trae 能正确创建 `src/components/`、`src/pages/` 等目录，组件命名规范，符合 React 最佳实践。\n\n- **依赖管理基本正确**  \n  能识别 `react-markdown` 需要搭配 `remark-gfm` 和 `rehype-highlight`，并正确安装。\n\n- **命令执行可靠**  \n  `npm run dev`、`npm run build` 等流程能自动执行，失败后也能尝试修复。\n\n---\n\n### ⚠️ 明显的局限性\n\n#### 1. **UI 生成极其原始**\n\n第一版生成的界面几乎是“barebone”，没有任何设计感，字体、间距、布局都未优化。\n\n**解决方式**：我将一个优秀博客的截图发给 Trae：\n\n> “请参考这个风格，优化 App.css。”\n\nAI 开始模仿布局、颜色、字体层级，最终实现了接近预期的视觉效果。这说明 **AI 不具备设计能力，但具备模仿能力**。\n\n#### 2. **代码生成效率低，质量一般**\n\n- 生成速度慢，有时卡在某个步骤\n- 代码结构冗余，如重复的 import、不合理的组件嵌套\n- 相比 Cursor，Trae 的上下文理解较弱，容易“忘记”之前的状态\n\n#### 3. **未严格遵循设计稿**\n\n这是最让我失望的一点：\n\n- **遗漏 `posts.json` 自动生成逻辑**  \n  设计稿明确要求通过脚本扫描 Markdown 文件生成元信息，但 Trae 直接硬编码了 `posts.json`\n- **未实现 GitHub Actions 自动部署**  \n  虽然生成了 `deploy.yml`，但未配置触发条件和发布流程\n\n- **详情页点击报错**  \n  因 `react-markdown` 的 `components` 配置错误，导致渲染失败\n\n这些问题暴露了 Trae 的一个本质问题：**它能执行任务，但缺乏对“工程完整性”的理解**。\n\n---\n\n## 🔁 修复过程：Qwen3 补位，完成闭环\n\n当 Trae 无法完成任务时，我启动了“AI 协作闭环”：\n\n```text\n发现问题 → 向 Qwen3 提问 → 获取高质量代码/方案 → 交给 Trae 执行 → 验收结果\n```\n\n例如：\n\n- Qwen3 提供 `scripts/generate-posts.js` 脚本，自动扫描 `/posts` 目录生成 `posts.json`\n- Qwen3 输出完整的 `.github/workflows/deploy.yml`，支持 push 自动部署\n- Qwen3 修复 `BlogDetail.jsx` 中的 `react-markdown` 组件配置\n\n最终，项目在人工引导下，**补全了所有设计稿要求的功能**。\n\n---\n\n## 🎯 总结：AI 编程的现状与思考\n\n作为一名前端工程师，这次实验让我对当前 AI 编程工具有了更清晰的认知：\n\n| 维度           | 评价                                       |\n| -------------- | ------------------------------------------ |\n| **设计能力**   | ✅ Qwen3 表现惊艳，输出专业、结构完整      |\n| **执行能力**   | ⚠️ Trae 能完成基础任务，但效率低、质量一般 |\n| **工程完整性** | ❌ 容易遗漏关键环节（如自动化、CI/CD）     |\n| **代码质量**   | ⚠️ 不如 Cursor，缺乏上下文连贯性           |\n| **可用性**     | ✅ 适合 MVP 快速搭建，不适合交付级项目     |\n\n### 我的结论：\n\n> **AI 还不能替代前端工程师，但可以成为“初级开发助手”**。\n\n在明确设计稿和人工监督的前提下，AI 可以：\n\n- 快速搭建项目骨架\n- 生成样板代码\n- 执行重复性任务\n\n但**架构设计、质量把控、工程闭环**仍需人类主导。\n\n---\n\n## 🚀 下一步：探索 AI 在前端工程中的更深应用\n\n接下来，我计划继续用这种方式：\n\n- ✅ 让 AI 生成组件单元测试\n- ✅ 自动生成 TypeScript 类型\n- ✅ 实现基于 AI 的代码审查\n- ✅ 探索 AI 驱动的 UI 设计生成\n\n这个博客不仅是一个展示，更是我与 AI 协作探索的起点。\n\n---\n\n项目源码：  \n👉 [https://github.com/sanguichen/sanguichen-blog](https://github.com/sanguichen/sanguichen-blog)\n\n欢迎交流 AI + 前端的更多可能性。\n\n---\n\n> **作者**：SanGuiChen\n> **链接**：https://sanguichen.github.io/sanguichen-blog/post/vibe-coding-blog  \n> **许可**：自由转载，注明出处即可\n"
  }
]